Praktikum 1: Werkzeuge der Programmierung I: Kommandozeilen-Interpreter, OpenJDK 17 und Eclipse, erste Java-Programme

1.0 Übersicht über Studierende und Information zu ChatGPT

1.1 Kommandozeilen-Interpreter

Merkmale eines Kommandozeilen-Interpreters:
- Steuerung des Betriebssystems eines Computers 
- zeilenorientierte Syntax
- Dialogverarbeitung sowie Stapelverarbeitung (oder Batch-Verarbeitung oder Pipelining)
- Makros (Folge von Kommandos unter einem (Makro-)Name, der wie ein Kommando aufrufbar ist) 

Unter Windows:
cd <Ordner>, cd .. 					(change directory)
del <File> 							(delete <File>) 
mkdir 								(make directory)
rmdir 								(remove directory)

copy <Datei> <Neu>: Erzeugt eine Kopie von <Datei> in <Neu> oder unter dem neuen Namen <Neu>
dir
dir *.txt
"/?" am Ende für Hilfe

Unter Linux/macOS:
pwd									(current working directory)
man									(manual)
cd <Ordner>, cd .. 					(change directory)
open, open -a TextEdit <Datei>, open -a atom, open -a emacs	(Bei mir cat/less atom. ...)
rm, rm -i 							(remove)
mkdir 								(make directory)
rmdir 								(remove directory)

cp <Datei> <Neu>: Erzeugt eine Kopie von <Datei> in <Neu> oder unter dem neuen Namen <Neu>
ls
ls .*, ls *.txt 
ls -l, ls -a, ls -l -a 
"-h" am Ende für Hilfe
------


Kleine Unterschiede je nach Betriebssystem (und sogar nach Versionen desselben Betriebssystem): 

- wo bin "ich":

$ pwd 
Linux (print working directory): 
$ pwd
/user/user 

macOS (print working directory): 
$ pwd 
/Users/user/

Windows (current directory): 
> cd
C:\Users\user

Eine der Möglichkeiten, um in einem Ordner namens meinOrdner zu gelangen, wenn man "user" heißt: 

Linux:
$ cd /home/user/meinOrdner

macOS:
$ cd /Users/user/meinOrdner

Windows:
$ cd C:\Users\user\meinOrdner

Editor aufrufen: 

auf MacOS:
open -a TextEdit <file>
open -a atom <file>
auf Windows:
notepad <file>
 
Quellen: 
- Wikipedia: Kommandozeilen-Interpreter, https://de.wikipedia.org/wiki/Kommandozeileninterpreter
- Ernst Pollak: BASH-Grundkurs, 2016, https://www.ernstlx.com/linux90bash.html
- The Carpentries: The Unix Shell: Summary of Basic Commands, 2021, 
  https://swcarpentry.github.io/shell-novice/reference.html
- Microsoft: PowerShell for Beginners, 2019
  https://social.technet.microsoft.com/wiki/contents/articles/4307.powershell-for-beginners.aspx

Konzepte:
- englisch: command-line interpreter, command-line shell
- deutsch: Kommandointerpreter, Befehlsinterpreter, oder kurz Kommandozeile
- Terminal, Terminal-Emulation, Konsole, Shell
- Betriebssystem, Windows, Linux, macOS
- PowerShell (Windows) und Command Prompt (Windows, alt)
- Bash, Z Shell, usw. (Unix, Linux, macOS)
- Ordner

1.2 Erste Java-Programme

Java-Programme 
- mit einem Editor schreiben 
- kompilieren 
- ausführen

Im Terminal: 

javac HelloWorld.java
java HelloWorld

Fehler zeigen:
java HalloWorl

Fehler im Programmcode mit javac zeigen

Ausgabe anpassen zu
Hallo neue "Java" Welt!

Einfache Berechnungen ausgeben

Konzepte: 
- Editor oder Texteditor 
  Unterschied zu Textverarbeitungssystem oder Desktop-Publishing-Software (wie Word oder einem PDF-Editor)
- Editoren: 
  ed  und vi (Unix, linux, macOS)
  Vi Improved (Vim), vile, nvi, elvis, nano, joe usw. (Unix, Linux, macOS)
  Emacs, GNU Emacs, XEmacs (Unix, Linux, macOS)
  Textedit (macOS)
  Atom
  Code (oder Visual Studio Code)
  Notepad und Notepad++ (Windows)
- Datei-Endungen (.txt, .java, .exe, .dmg (macOS))
  Windows versteckt diese normalerweise, muss im Explorer erst aktiviert werden
- Hauptprozedur (main procedure)

1.3 Eclipse

Workspace wichtig, dort liegen die Dateien
Bei Problemen mit Eclipse kann dieser zurückgesetzt/gelöscht werden

Neus Projekt anlegen (z.B. für jedes Praktikum, und jede Hausaufgabe)
(vgl. erstes Übungsblatt; Java 17 auswählen, kein module-info anlegen)
  - Klasse erzeugen (vgl. erstes Übungsblatt; kein Package angeben bzw. leer lassen)
Aktuell wird Eclipse als IDE empfohlen! (weil package muss leer sein, Verweis zu IntelliJ)

Zeigen:
- Dateien aus Eclipse "exportieren" mit Explorer und Drag'n'Drop
- Dateien in Eclipse "importieren" mit Drag'n'Drop, wenn über Explorer, dann Refresh in Eclipse wählen

Zahlen in Variablen speichern (int: Wertebereich -2147483648...2147483647)
(vgl. Addieren1.java)

Eingaben von der Konsole lesen
WieHeisstDu.java

Addieren1.java überarbeiten, Methode anlegen und Berechnung dorthin verschieben, ggf. Fallunterscheidung für "sehr große Zahl"
(vgl. Addieren2.java und Addieren3.java)

WasLernstDu.java
- Bedingung kann nicht (learned == "Java") sein (genaue Erklärung kommt später)
- Variationen der Bedingung u. a. 
     "Java";
     "java"
     ( (learned.equals("Java")) || (learned.equals("java")) ) oder (learned.equalsIgnoreCase("Java"))

Konzepte:
- Typ einer Variable (z.B.: String, int, double, boolean)
- Variablendeklaration (int i, oder int i, j;)
- Variablendefinition/(Variablen-)Initialisierung (int i = 3; oder int i = 2, j=1;)
- (Wert-)Zuweisung (Notationen: in Java =, in anderen Sprachen :=)
- Wert oder Zustand einer Variable
- Wertebereiche von Variablen (Overflow)
- Verzweigung oder Fallunterscheidung oder if-then-else (switch-case: <http://www.tutego.de/javabuch/Java-ist-auch-eine-Insel/15/02_005.html#u2.5.4>)
- Bedingung
- Formaler (Prozedur-)Parameter, Argument einer Prozedur
- Prozedurdeklaration und Prozeduraufruf

1.4 Aufgabe

https://gate.ifi.lmu.de/submissionsystem/servlets/ShowLecture?lecture=37

Bitte die Ausgaben exakt so schreiben, ohne Umlaute hier!

1. Ergänzen Sie die Datei Triangle.java, so dass der Flächeninhalt eines Dreiecks in der Methode/Funktion areaTriangle berechnet und zurückgegeben wird (Formel: A=1/2*höhe*breite).

2. Wenn die Höhe oder Breite kleiner als 0 ist, soll die Methode -1 zurückgeben.

3. Ändern Sie die Ausgabe so, dass Sie dem folgenden Muster entspricht:
Die Flaeche des Dreiecks mit der Hoehe "[h]" und der Breite "[b]" ist: [A].

Beispiel für höhe=4 und breite=3:
Die Flaeche des Dreiecks mit der Hoehe "4" und der Breite "3" ist: 6.
